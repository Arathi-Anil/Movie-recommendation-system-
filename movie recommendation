import numpy as np
import pandas as pd
import difflib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import os
import tkinter as tk
from tkinter import simpledialog
import pickle

os.chdir('C:\\Users\\arath\\Documents\\Project\\Movie')
movies_data = pd.read_csv('movies.csv')

selected_features = ['genres', 'keywords', 'tagline', 'cast', 'director']

for feature in selected_features:
    movies_data[feature] = movies_data[feature].fillna('')

combined_features = movies_data['genres'] + ' ' + movies_data['keywords'] + ' ' + movies_data['tagline'] + ' ' + \
                    movies_data['cast'] + ' ' + movies_data['director']

vectorizer = TfidfVectorizer()
feature_vectors = vectorizer.fit_transform(combined_features)

similarity = cosine_similarity(feature_vectors)

def recommend_movie():
    movie_name = simpledialog.askstring("Input", "Enter your favourite movie name:")
    if movie_name:
        list_of_all_titles = movies_data['title'].tolist()
        find_close_match = difflib.get_close_matches(movie_name, list_of_all_titles)
        if find_close_match:
            close_match = find_close_match[0]
            index_of_the_movie = movies_data[movies_data.title == close_match]['index'].values[0]
            similarity_score = list(enumerate(similarity[index_of_the_movie]))
            sorted_similar_movies = sorted(similarity_score, key=lambda x: x[1], reverse=True)

            recommended_movies = []
            for movie in sorted_similar_movies:
                index = movie[0]
                title_from_index = movies_data[movies_data.index == index]['title'].values[0]
                recommended_movies.append(title_from_index)
                if len(recommended_movies) >= 30:
                    break

            recommended_str = "\n".join([f"{i+1}. {movie}" for i, movie in enumerate(recommended_movies)])
            tk.messagebox.showinfo("Recommendations", f"Movies suggested for you:\n{recommended_str}")
        else:
            tk.messagebox.showinfo("Error", "Movie not found in the database")

with open('movie_recommendation_model.pkl', 'wb') as file:
    pickle.dump((vectorizer, similarity, movies_data), file)

root = tk.Tk()
root.geometry("300x100")
root.title("Movie Recommendation")

button = tk.Button(root, text="Recommend Movie", command=recommend_movie)
button.pack(pady=20)

root.mainloop()
